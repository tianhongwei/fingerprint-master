Android开发学习—指纹识别系统的原理与使用: https://www.2cto.com/kf/201701/589988.html

对称加密：
所谓对称，就是采用这种加密方法的双方使用方式用同样的密钥进行加密和解密。密钥是控制加密及解密过程的指令。
算法是一组规则，规定如何进行加密和解密。因此加密的安全性不仅取决于加密算法本身，密钥管理的安全性更是重要。
因为加密和解密都使用同一个密钥，如何把密钥安全地传递到解密者手上就成了必须要解决的问题。

使用指纹识别的对称加密功能的主要流程如下：
1、使用 KeyGenerator 创建一个对称密钥，存放在 KeyStore 里。
2、设置 KeyGenParameterSpec.Builder.setUserAuthenticationRequired() 为true，
3、使用创建好的对称密钥初始化一个Cipher对象，并用该对象调用 FingerprintManager.authenticate() 方法
启动指纹传感器并开始监听。
4、重写FingerprintManager.AuthenticationCallback 的几个回调方法，
以处理指纹识别成功（onAuthenticationSucceeded()）、失败（onAuthenticationFailed() 和
onAuthenticationError()）等情况。

创建密钥要涉及到三个类:
       KeyGenerator产生密钥
       KeyStore存放获取密钥
       Cipher,是一个按照一定的加密规则，将数据进行加密后的一个对象

使用指纹识别功能
真正到了使用指纹识别功能的时候，你会发现其实很简单，只是调用 FingerprintManager 类的的方法authenticate()而已，
然后系统会有相应的回调反馈给我们，该方法如下：
public void authenticate(CryptoObject crypto, CancellationSignal cancel, int flags,
AuthenticationCallback callback, Handler handler)

完成指纹识别后，还要记得将 AuthenticationCallback 关闭掉：
public void stopListening() {
  if (cancellationSignal != null) {
    selfCancelled = true;
    cancellationSignal.cancel();
    cancellationSignal = null;
  }
}
重写回调方法
调用了 authenticate() 方法后，系统就会启动指纹传感器，并开始扫描。这时候根据扫描结果，会通过
FingerprintManager.AuthenticationCallback类返回几个回调方法：
// 成功
onAuthenticationSucceeded()
// 失败
onAuthenticationFaile()
// 错误
onAuthenticationError()

一般我们需要重写这几个方法，以实现我们的功能。